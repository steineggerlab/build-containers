FROM debian:buster
ARG VER="12-6"

RUN dpkg --add-architecture arm64
RUN sed -i s/deb.debian.org/archive.debian.org/g /etc/apt/sources.list; \
    sed -i s/security.debian.org/archive.debian.org/g /etc/apt/sources.list; \
    apt-get update; \
    apt-get -y install -o APT::Immediate-Configure=false \
        git curl wget vim ninja-build crossbuild-essential-arm64 zlib1g-dev:arm64 libbz2-dev:arm64 software-properties-common

RUN wget https://github.com/Kitware/CMake/releases/download/v3.31.0/cmake-3.31.0-linux-x86_64.sh; \
    chmod +x cmake-3.31.0-linux-x86_64.sh; \
    ./cmake-3.31.0-linux-x86_64.sh --skip-license --prefix=/usr/local;

RUN wget -O cuda-x64.deb  https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.1-1_all.deb
RUN wget -O cuda-sbsa.deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/cross-linux-sbsa/cuda-keyring_1.1-1_all.deb
RUN dpkg -i cuda-x64.deb && dpkg -i cuda-sbsa.deb
RUN apt-get update
RUN apt-get install -y cuda-nvcc-${VER} cuda-nvcc-cross-sbsa-${VER} cuda-cudart-cross-sbsa-${VER} libcublas-cross-sbsa-${VER}

RUN curl https://sh.rustup.rs -sSf | \
    sh -s -- --default-toolchain stable -y
ENV PATH=/root/.cargo/bin:$PATH

RUN curl https://apt.llvm.org/llvm.sh -sSf | \
        bash -s -- 20; \
    echo "set(CMAKE_SYSTEM_NAME Linux)" > /opt/toolchain.cmake; \
    echo "set(CMAKE_SYSTEM_PROCESSOR aarch64)" >> /opt/toolchain.cmake; \
    echo "set(CMAKE_C_COMPILER /opt/clang-aarch64)" >> /opt/toolchain.cmake; \
    echo "set(CMAKE_CXX_COMPILER /opt/clang++-aarch64)" >> /opt/toolchain.cmake; \
    echo 'set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})' >> /opt/toolchain.cmake; \
    echo "set(CMAKE_CUDA_COMPILER /usr/local/cuda/bin/nvcc)" >> /opt/toolchain.cmake; \
    echo 'set(CMAKE_CUDA_FLAGS "-t 0 --split-compile=0 -allow-unsupported-compiler")' >> /opt/toolchain.cmake; \
    echo 'set(CMAKE_CUDA_LINK_FLAGS "-t 0 --split-compile=0 -allow-unsupported-compiler")' >> /opt/toolchain.cmake; \
    echo '#!/bin/sh\n/usr/bin/clang-20 --target=aarch64-linux-gnu "${@}"\n' > /opt/clang-aarch64; \
    echo '#!/bin/sh\n/usr/bin/clang++-20 --target=aarch64-linux-gnu "${@}"\n' > /opt/clang++-aarch64; \
    chmod +x /opt/clang-aarch64 /opt/clang++-aarch64; \
    cat /opt/clang-aarch64 /opt/clang++-aarch64;

ENV OMPVERSION=20.1.7
ENV LIBOMP_AARCH64="/opt/build_libomp/openmp-${OMPVERSION}.src/build-arm64/runtime/src"
RUN mkdir -p build_libomp && cd build_libomp; \
    wget -qO- https://github.com/llvm/llvm-project/releases/download/llvmorg-${OMPVERSION}/cmake-${OMPVERSION}.src.tar.xz | tar xJvf -; \
    wget -qO- https://github.com/llvm/llvm-project/releases/download/llvmorg-${OMPVERSION}/openmp-${OMPVERSION}.src.tar.xz | tar xJvf -; \
    mv cmake-${OMPVERSION}.src cmake; \
    cd openmp-${OMPVERSION}.src; \
    mkdir -p build-arm64 && cd build-arm64; \
    cmake \
        -GNinja \
        -DLIBOMP_ENABLE_SHARED=OFF \
        -DLIBOMP_INSTALL_ALIASES=OFF \
        -DLIBOMP_ARCH=aarch64 \
        -DCMAKE_TOOLCHAIN_FILE=/opt/toolchain.cmake \
        ..; \
    cmake --build . -j$(nproc --all) -v;
